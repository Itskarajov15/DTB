// <auto-generated />
using System;
using DTB.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DTB.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240313123916_ChangedCategories")]
    partial class ChangedCategories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CompanyLocation", b =>
                {
                    b.Property<string>("CompaniesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompaniesId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("CompanyLocation");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Article", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.BaseUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ChatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "704c9458-51bc-4fb3-a238-8fbaf2fc2c0b",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1054),
                            Name = "Architecture, Construction",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_architecture_gqdlbl.png"
                        },
                        new
                        {
                            Id = "e2bd38f7-11fa-476f-aaf7-79fa4fdcace8",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1129),
                            Name = "Health and Pharmacy",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_health_nhktmm.png"
                        },
                        new
                        {
                            Id = "51aa5900-a32b-473b-a7c2-152404e4e27f",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1207),
                            Name = "Drivers, Couriers",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_derivers_q8g7p3.png"
                        },
                        new
                        {
                            Id = "e40120c1-e95a-477f-b53b-c486b518da2d",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1216),
                            Name = "Restaurants, Bars, Hotels, Tourism",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824823/icon_restaurant_ee4ubg.png"
                        },
                        new
                        {
                            Id = "b26c0981-03b6-41ba-95c4-888ad219e718",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1223),
                            Name = "Engineers and Technicians",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_engineer_wzjia1.png"
                        },
                        new
                        {
                            Id = "7a6d0ab7-296c-490d-81e2-30a51f433fbf",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1239),
                            Name = "Human Resources",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_hr_jbc5jn.png"
                        },
                        new
                        {
                            Id = "fb4cb4f5-8c12-4108-8251-cdd80fcbe4f1",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1260),
                            Name = "Media, Publishing",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_media_mpzkez.png"
                        },
                        new
                        {
                            Id = "179ae6fb-a446-4138-8359-d1d8bafb51b3",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1271),
                            Name = "Logistics, Spedition",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_logistic_ktvoqa.png"
                        },
                        new
                        {
                            Id = "c2f62778-5f6f-4117-b4a0-57356a45c143",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1280),
                            Name = "Customer support",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_customersupport_fbvie5.png"
                        },
                        new
                        {
                            Id = "507f3e99-6543-46ba-a422-36ab35703cb1",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1288),
                            Name = "Banking, Lending, Insurance",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_banking_dkgjma.png"
                        },
                        new
                        {
                            Id = "6bbd2f15-0cb1-4af1-9e31-7fc00eaa9d72",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1298),
                            Name = "Marketing, Advertising, PR",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_hr_jbc5jn.png"
                        },
                        new
                        {
                            Id = "c575dcfd-9a45-4dd4-a2b2-35708ca9ea33",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1305),
                            Name = "Office and Business activities",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_office_xkdjih.png"
                        },
                        new
                        {
                            Id = "7f42b129-71be-4f06-8f44-a5c6910edc24",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1315),
                            Name = "Energy, Water and Sewage, Utilities",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_energy_kznsrc.png"
                        },
                        new
                        {
                            Id = "b8dc5ad1-ff5f-4acf-b6c0-acda39b0026e",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1325),
                            Name = "Telecommunications - engineers and technicians",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824825/icon_telecoms_sbsq5u.png"
                        },
                        new
                        {
                            Id = "ca22d765-2bfb-4ca0-ac00-fb94a0759ee1",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1338),
                            Name = "Education, Courses, Translators",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_education_kdsm7z.png"
                        },
                        new
                        {
                            Id = "c39aa039-e2af-4445-a9d6-0076cf11bd68",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1344),
                            Name = "Security",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824825/icon_security_c4fjq0.png"
                        },
                        new
                        {
                            Id = "13ba54ca-ccd4-4bde-a81f-d9b25429cd37",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1351),
                            Name = "Real-estate",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_realestate_dkhhfe.png"
                        },
                        new
                        {
                            Id = "42ddca84-dd4a-492c-ada4-e988fae7e5e1",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1361),
                            Name = "Legal",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_legal_ofzofx.png"
                        },
                        new
                        {
                            Id = "e6c80278-8283-488c-ad9b-3b30530c1765",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1371),
                            Name = "Aviation, Airport & Airline",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_airline_bgvmiu.png"
                        },
                        new
                        {
                            Id = "0de06753-27d9-40be-a58a-65ac33ca8dfc",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1377),
                            Name = "Auto Service",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824819/icon_autoservice_iabxkj.png"
                        },
                        new
                        {
                            Id = "24a4704c-e855-459e-bc84-bb14ff9c5300",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1386),
                            Name = "Retail, Wholesale",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824824/icon_retail_pgicm9.png"
                        },
                        new
                        {
                            Id = "5e8e9edb-5db6-43f4-96a4-373755755314",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1395),
                            Name = "Technical Support",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824825/icon_techsupport_zph0mx.png"
                        },
                        new
                        {
                            Id = "e28fe478-6b33-4e92-a7d1-09462f0847d3",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1405),
                            Name = "Research and development",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824822/icon_research_mdrafi.png"
                        },
                        new
                        {
                            Id = "6ae5f6d1-0560-4ca9-9a85-3601b531c680",
                            DateOfCreation = new DateTime(2024, 3, 13, 14, 39, 16, 113, DateTimeKind.Local).AddTicks(1414),
                            Name = "Accouting, Audit, Finance",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_finance_r5bftt.png"
                        });
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Chat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArticleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.File", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.JobAd", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfessionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("JobAds");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Profession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Company", b =>
                {
                    b.HasBaseType("DTB.Infrastructure.Data.Entities.BaseUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("CategoryId");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.User", b =>
                {
                    b.HasBaseType("DTB.Infrastructure.Data.Entities.BaseUser");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JobAdId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfessionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasIndex("JobAdId");

                    b.HasIndex("ProfessionId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("CompanyLocation", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Article", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.BaseUser", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Chat", null)
                        .WithMany("Participants")
                        .HasForeignKey("ChatId");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Comment", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Article");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.File", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.User", null)
                        .WithMany("Files")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.JobAd", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("JobAds")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.Company", "Company")
                        .WithMany("JobAds")
                        .HasForeignKey("CompanyId");

                    b.HasOne("DTB.Infrastructure.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("DTB.Infrastructure.Data.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Location");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Message", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Chat");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Profession", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("Professions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Company", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("Companies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.User", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.JobAd", null)
                        .WithMany("Candidates")
                        .HasForeignKey("JobAdId");

                    b.HasOne("DTB.Infrastructure.Data.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("JobAds");

                    b.Navigation("Professions");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.JobAd", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Company", b =>
                {
                    b.Navigation("JobAds");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.User", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}

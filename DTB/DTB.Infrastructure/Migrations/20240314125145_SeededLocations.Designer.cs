// <auto-generated />
using System;
using DTB.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DTB.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240314125145_SeededLocations")]
    partial class SeededLocations
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CompanyLocation", b =>
                {
                    b.Property<string>("CompaniesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompaniesId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("CompanyLocation");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Article", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.BaseUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ChatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "96c8d7e8-371e-4bdc-9c96-2ea0b74a4394",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7620),
                            Name = "Architecture, Construction",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_architecture_gqdlbl.png"
                        },
                        new
                        {
                            Id = "22b99f66-26c5-47b2-8aa2-1f501eb39497",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7684),
                            Name = "Health and Pharmacy",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_health_nhktmm.png"
                        },
                        new
                        {
                            Id = "45467b4f-9e51-4fa4-956b-4cda82a33e4c",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7689),
                            Name = "Drivers, Couriers",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_derivers_q8g7p3.png"
                        },
                        new
                        {
                            Id = "56a3582b-575f-43c4-8240-a0b6abbf81f6",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7728),
                            Name = "Restaurants, Bars, Hotels, Tourism",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824823/icon_restaurant_ee4ubg.png"
                        },
                        new
                        {
                            Id = "2d14f66c-7a80-45b8-a401-7b4495e446c0",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7736),
                            Name = "Engineers and Technicians",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_engineer_wzjia1.png"
                        },
                        new
                        {
                            Id = "c3286ba7-824e-44c0-bfee-b59e0fe19224",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7751),
                            Name = "Human Resources",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_hr_jbc5jn.png"
                        },
                        new
                        {
                            Id = "e4326162-3d3d-4150-99f5-9b929b12ac2c",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7759),
                            Name = "Media, Publishing",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_media_mpzkez.png"
                        },
                        new
                        {
                            Id = "e01b0819-4b78-4c9a-925b-8c4e70f3d3ea",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7781),
                            Name = "Logistics, Spedition",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_logistic_ktvoqa.png"
                        },
                        new
                        {
                            Id = "0a37e6b1-9fa5-44e1-98cf-df2c1e7caa96",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7789),
                            Name = "Customer support",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_customersupport_fbvie5.png"
                        },
                        new
                        {
                            Id = "f9fa459e-d513-4d77-878b-0c40aed1d950",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7798),
                            Name = "Banking, Lending, Insurance",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_banking_dkgjma.png"
                        },
                        new
                        {
                            Id = "d662caef-0fb3-4789-ac33-a8b33bebb4cc",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7806),
                            Name = "Marketing, Advertising, PR",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_hr_jbc5jn.png"
                        },
                        new
                        {
                            Id = "7325646d-702d-46f9-85b5-e82cda53d52d",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7813),
                            Name = "Office and Business activities",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_office_xkdjih.png"
                        },
                        new
                        {
                            Id = "c22b9b10-3d4b-4dfd-b6ec-d6685c7ef3d3",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7821),
                            Name = "Energy, Water and Sewage, Utilities",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_energy_kznsrc.png"
                        },
                        new
                        {
                            Id = "ff634f7f-1056-4008-a247-f8079751833d",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7831),
                            Name = "Telecommunications - engineers and technicians",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824825/icon_telecoms_sbsq5u.png"
                        },
                        new
                        {
                            Id = "c988a75e-e75a-4eee-893b-b823672d3f16",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7839),
                            Name = "Education, Courses, Translators",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_education_kdsm7z.png"
                        },
                        new
                        {
                            Id = "b319e51e-40bb-4d5e-a91e-05ff932b44f8",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7848),
                            Name = "Security",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824825/icon_security_c4fjq0.png"
                        },
                        new
                        {
                            Id = "4f7000d8-5e7c-47a0-aac2-634c36fcc064",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7854),
                            Name = "Real-estate",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_realestate_dkhhfe.png"
                        },
                        new
                        {
                            Id = "5b2b0f74-0757-4105-912d-74a3b10ef836",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7862),
                            Name = "Legal",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_legal_ofzofx.png"
                        },
                        new
                        {
                            Id = "5fa7c120-146b-4670-a195-dbb91ed043d6",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7869),
                            Name = "Aviation, Airport & Airline",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_airline_bgvmiu.png"
                        },
                        new
                        {
                            Id = "c8b6c121-2dbf-4867-92cf-2b1c740a3059",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7876),
                            Name = "Auto Service",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824819/icon_autoservice_iabxkj.png"
                        },
                        new
                        {
                            Id = "7743323e-8664-4a34-8da6-1d6509278f6b",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7882),
                            Name = "Retail, Wholesale",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824824/icon_retail_pgicm9.png"
                        },
                        new
                        {
                            Id = "3bc071f6-3097-4437-b5f9-2d83edad8436",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7889),
                            Name = "Technical Support",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824825/icon_techsupport_zph0mx.png"
                        },
                        new
                        {
                            Id = "2610c618-5115-4afc-8f80-5aa8e194ad6e",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7896),
                            Name = "Research and development",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824822/icon_research_mdrafi.png"
                        },
                        new
                        {
                            Id = "5730f17a-acb1-4a1c-9f6d-b5c97e82eafa",
                            DateOfCreation = new DateTime(2024, 3, 14, 14, 51, 43, 797, DateTimeKind.Local).AddTicks(7904),
                            Name = "Accouting, Audit, Finance",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_finance_r5bftt.png"
                        });
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Chat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArticleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.File", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.JobAd", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfessionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("JobAds");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = "adda0d37-4f23-4d5a-954a-c46170ffdfa2",
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = "2abb2b92-8a02-4704-9c56-0d4943c4eb34",
                            Name = "Burgas"
                        },
                        new
                        {
                            Id = "04ae6924-e107-456e-b235-4545ab6cca27",
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = "1a5a55f2-e219-41b3-bd6c-6f8f916fd904",
                            Name = "Varna"
                        },
                        new
                        {
                            Id = "2cf5544e-b4a4-4260-b7e5-5e2432c9b543",
                            Name = "Yambol"
                        },
                        new
                        {
                            Id = "a9f313a1-fc58-49fa-a865-71360315e724",
                            Name = "Blagoevgrad"
                        },
                        new
                        {
                            Id = "0d321f77-eb4d-48ca-9180-7b9f97c5fbf1",
                            Name = "Sliven"
                        },
                        new
                        {
                            Id = "4ec6d58c-04a4-462e-aea1-3a0445df0c3f",
                            Name = "Dimitrovgrad"
                        },
                        new
                        {
                            Id = "c7298e8e-aef7-42c9-ab42-aee212e44980",
                            Name = "Ruse"
                        },
                        new
                        {
                            Id = "8d6615de-db1e-4794-9a51-7d0260c0f060",
                            Name = "Elhovo"
                        });
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Profession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Company", b =>
                {
                    b.HasBaseType("DTB.Infrastructure.Data.Entities.BaseUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("CategoryId");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.User", b =>
                {
                    b.HasBaseType("DTB.Infrastructure.Data.Entities.BaseUser");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JobAdId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfessionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasIndex("JobAdId");

                    b.HasIndex("ProfessionId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("CompanyLocation", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Article", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.BaseUser", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Chat", null)
                        .WithMany("Participants")
                        .HasForeignKey("ChatId");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Comment", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Article");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.File", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.User", null)
                        .WithMany("Files")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.JobAd", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("JobAds")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.Company", "Company")
                        .WithMany("JobAds")
                        .HasForeignKey("CompanyId");

                    b.HasOne("DTB.Infrastructure.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("DTB.Infrastructure.Data.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Location");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Message", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Chat");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Profession", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("Professions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Company", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("Companies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.User", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.JobAd", null)
                        .WithMany("Candidates")
                        .HasForeignKey("JobAdId");

                    b.HasOne("DTB.Infrastructure.Data.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("JobAds");

                    b.Navigation("Professions");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.JobAd", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Company", b =>
                {
                    b.Navigation("JobAds");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.User", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}

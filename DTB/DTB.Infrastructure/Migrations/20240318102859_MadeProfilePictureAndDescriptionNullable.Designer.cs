// <auto-generated />
using System;
using DTB.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DTB.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240318102859_MadeProfilePictureAndDescriptionNullable")]
    partial class MadeProfilePictureAndDescriptionNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CompanyLocation", b =>
                {
                    b.Property<string>("CompaniesId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LocationsId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompaniesId", "LocationsId");

                    b.HasIndex("LocationsId");

                    b.ToTable("CompanyLocation");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Article", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Articles");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.BaseUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ChatId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("nvarchar(8)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfilePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("BaseUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("DateOfCreation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PictureUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = "c8d30a81-9fac-4371-adbd-e2e853e7f711",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(3489),
                            Name = "Architecture, Construction",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_architecture_gqdlbl.png"
                        },
                        new
                        {
                            Id = "a478fea2-8413-4e1f-a8e5-e2bdf9eec127",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4178),
                            Name = "Health and Pharmacy",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_health_nhktmm.png"
                        },
                        new
                        {
                            Id = "42ee7dab-40de-4dfa-92e2-19e84d9d28b5",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4194),
                            Name = "Drivers, Couriers",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_derivers_q8g7p3.png"
                        },
                        new
                        {
                            Id = "1efd4897-236c-47ce-a738-ee6dd12103b7",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4203),
                            Name = "Restaurants, Bars, Hotels, Tourism",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824823/icon_restaurant_ee4ubg.png"
                        },
                        new
                        {
                            Id = "38b5eb73-7829-497b-a207-9bcf3fef3b1b",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4210),
                            Name = "Engineers and Technicians",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_engineer_wzjia1.png"
                        },
                        new
                        {
                            Id = "438c1389-c017-43b8-a34a-46b8c64f5e1d",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4224),
                            Name = "Human Resources",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_hr_jbc5jn.png"
                        },
                        new
                        {
                            Id = "3c1fda93-5ef8-4db2-97f7-25f163fbca67",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4232),
                            Name = "Media, Publishing",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_media_mpzkez.png"
                        },
                        new
                        {
                            Id = "faa94ce0-792b-4e2f-901d-c726d0b2527a",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4254),
                            Name = "Logistics, Spedition",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_logistic_ktvoqa.png"
                        },
                        new
                        {
                            Id = "33319516-ca1d-47a2-84f2-7699259ce93d",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4262),
                            Name = "Customer support",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_customersupport_fbvie5.png"
                        },
                        new
                        {
                            Id = "67d9d43a-345f-47d6-a90d-c81a9602fa23",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4274),
                            Name = "Banking, Lending, Insurance",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_banking_dkgjma.png"
                        },
                        new
                        {
                            Id = "d4c1bbc7-1c04-4ce5-899f-821becc77677",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4282),
                            Name = "Marketing, Advertising, PR",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_hr_jbc5jn.png"
                        },
                        new
                        {
                            Id = "9cd67ced-4cfc-4398-9d10-0dbd9527ffaf",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4290),
                            Name = "Office and Business activities",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_office_xkdjih.png"
                        },
                        new
                        {
                            Id = "90d67576-3cf2-4b69-a5c1-1f0c4d9aad97",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4298),
                            Name = "Energy, Water and Sewage, Utilities",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_energy_kznsrc.png"
                        },
                        new
                        {
                            Id = "015f0988-dcf7-4a44-892c-ae4eac49cc6f",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4305),
                            Name = "Telecommunications - engineers and technicians",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824825/icon_telecoms_sbsq5u.png"
                        },
                        new
                        {
                            Id = "aa941b0a-6549-422e-8ce4-fd84ade11de0",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4313),
                            Name = "Education, Courses, Translators",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_education_kdsm7z.png"
                        },
                        new
                        {
                            Id = "2cd2d3c7-f761-4e8b-9a3d-1a50aff25eba",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4323),
                            Name = "Security",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824825/icon_security_c4fjq0.png"
                        },
                        new
                        {
                            Id = "9d25e57d-afde-4014-a242-bca591dca67e",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4331),
                            Name = "Real-estate",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_realestate_dkhhfe.png"
                        },
                        new
                        {
                            Id = "93d4ba11-bfc1-44e8-8468-597b339ffd24",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4341),
                            Name = "Legal",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824821/icon_legal_ofzofx.png"
                        },
                        new
                        {
                            Id = "f835430c-177d-4313-90d4-4f93bc99ab8a",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4347),
                            Name = "Aviation, Airport & Airline",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_airline_bgvmiu.png"
                        },
                        new
                        {
                            Id = "1799ed9f-6a0f-41aa-9fd0-b8cce18eb8ba",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4352),
                            Name = "Auto Service",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824819/icon_autoservice_iabxkj.png"
                        },
                        new
                        {
                            Id = "991c653d-8328-4d32-b705-20b109951d6a",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4359),
                            Name = "Retail, Wholesale",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824824/icon_retail_pgicm9.png"
                        },
                        new
                        {
                            Id = "02b612b0-be2e-4faf-9d1c-5800c1ba0177",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4366),
                            Name = "Technical Support",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824825/icon_techsupport_zph0mx.png"
                        },
                        new
                        {
                            Id = "cd804d62-8242-428f-ac64-06f215959969",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4373),
                            Name = "Research and development",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824822/icon_research_mdrafi.png"
                        },
                        new
                        {
                            Id = "1350d7c8-78da-42d5-b165-a99c481bbaa0",
                            DateOfCreation = new DateTime(2024, 3, 18, 12, 28, 57, 944, DateTimeKind.Local).AddTicks(4381),
                            Name = "Accouting, Audit, Finance",
                            PictureUrl = "https://res.cloudinary.com/dftfu5p0r/image/upload/v1709824820/icon_finance_r5bftt.png"
                        });
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Chat", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArticleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.File", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.JobAd", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Experience")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LocationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProfessionId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("JobAds");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Location", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Locations");

                    b.HasData(
                        new
                        {
                            Id = "adc41865-003d-4cde-9738-e9c2db4a72b8",
                            Name = "Sofia"
                        },
                        new
                        {
                            Id = "2162e896-167e-492a-9800-b0e5c875e5ef",
                            Name = "Burgas"
                        },
                        new
                        {
                            Id = "c05a5f30-ad12-4246-bb9a-7a0232e85fae",
                            Name = "Plovdiv"
                        },
                        new
                        {
                            Id = "539ce7e0-3dc6-4301-9be4-c1f75e5b4846",
                            Name = "Varna"
                        },
                        new
                        {
                            Id = "657f6f85-d8d2-45a1-8ddc-4eb39d574732",
                            Name = "Yambol"
                        },
                        new
                        {
                            Id = "36f23e96-1b0a-49d1-bb56-0c2f8696d83e",
                            Name = "Blagoevgrad"
                        },
                        new
                        {
                            Id = "f2bdba4c-898d-46a9-8021-257a582f5fce",
                            Name = "Sliven"
                        },
                        new
                        {
                            Id = "f58cca15-7681-4f13-8894-906db6df8944",
                            Name = "Dimitrovgrad"
                        },
                        new
                        {
                            Id = "dc432008-8802-4899-adda-720d11c9c762",
                            Name = "Ruse"
                        },
                        new
                        {
                            Id = "5e98b3c8-019d-4ddb-a4f1-f2c53bdaa147",
                            Name = "Elhovo"
                        });
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Message", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceiverId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SenderId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Profession", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Professions");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Company", b =>
                {
                    b.HasBaseType("DTB.Infrastructure.Data.Entities.BaseUser");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasIndex("CategoryId");

                    b.HasDiscriminator().HasValue("Company");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.User", b =>
                {
                    b.HasBaseType("DTB.Infrastructure.Data.Entities.BaseUser");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JobAdId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProfessionId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasIndex("JobAdId");

                    b.HasIndex("ProfessionId");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("CompanyLocation", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Company", null)
                        .WithMany()
                        .HasForeignKey("CompaniesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.Location", null)
                        .WithMany()
                        .HasForeignKey("LocationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Article", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.BaseUser", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Chat", null)
                        .WithMany("Participants")
                        .HasForeignKey("ChatId");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Comment", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId");

                    b.Navigation("Article");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.File", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.User", null)
                        .WithMany("Files")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.JobAd", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("JobAds")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.Company", "Company")
                        .WithMany("JobAds")
                        .HasForeignKey("CompanyId");

                    b.HasOne("DTB.Infrastructure.Data.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId");

                    b.HasOne("DTB.Infrastructure.Data.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");

                    b.Navigation("Category");

                    b.Navigation("Company");

                    b.Navigation("Location");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Message", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverId");

                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderId");

                    b.Navigation("Chat");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Profession", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("Professions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.BaseUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Company", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.Category", "Category")
                        .WithMany("Companies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.User", b =>
                {
                    b.HasOne("DTB.Infrastructure.Data.Entities.JobAd", null)
                        .WithMany("Candidates")
                        .HasForeignKey("JobAdId");

                    b.HasOne("DTB.Infrastructure.Data.Entities.Profession", "Profession")
                        .WithMany()
                        .HasForeignKey("ProfessionId");

                    b.Navigation("Profession");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Category", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("JobAds");

                    b.Navigation("Professions");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.JobAd", b =>
                {
                    b.Navigation("Candidates");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.Company", b =>
                {
                    b.Navigation("JobAds");
                });

            modelBuilder.Entity("DTB.Infrastructure.Data.Entities.User", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
